{"version":3,"file":"use-grindery-login.cjs.production.min.js","sources":["../src/utils.ts","../src/index.tsx"],"sourcesContent":["declare global {\n  interface Window {\n    _hsq?: any[];\n    LOQ?: any[];\n  }\n}\n\nexport const identifyUserInHubspot = (userId: string, email: string) => {\n  let _hsq = (window._hsq = window._hsq || []);\n  _hsq.push([\n    'identify',\n    {\n      email: email,\n      id: userId,\n    },\n  ]);\n};\n\nexport const identifyUserInLuckyOrange = (userId: string, email: string) => {\n  window.LOQ = window.LOQ || [];\n  window.LOQ.push([\n    'ready',\n    async (LO: any) => {\n      await LO.$internal.ready('visitor');\n      LO.visitor.identify(userId, { email: email });\n    },\n  ]);\n};\n","import React, {\n  useState,\n  createContext,\n  useContext,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { identifyUserInHubspot, identifyUserInLuckyOrange } from './utils';\n\n// Grindery Engine URL\nconst ENGINE_URL = 'https://orchestrator.grindery.com';\n\n// Login page URL\nexport const LOGIN_URL =\n  window.location.hostname.includes('-staging.grindery') ||\n  window.location.hostname.includes('localhost') ||\n  window.location.hostname.includes('127.0.0.1')\n    ? 'https://login-staging.grindery.com'\n    : 'https://login.grindery.com';\n\n// Authentication token object definition\nexport type AuthToken = {\n  access_token: string;\n  expires_in: number;\n  refresh_token?: string;\n  token_type: string;\n};\n\n// Context properties definition\nexport type GrinderyLoginContextProps = {\n  /** Authentication token object */\n  token: AuthToken | null;\n\n  /** User ID */\n  user: string | null;\n\n  /** User address */\n  address: string | null;\n\n  /** User authentication loading state */\n  isAuthenticating: boolean;\n\n  /** Connect user */\n  connect: () => void;\n\n  /** Disconnect user */\n  disconnect: () => void;\n};\n\nexport type GrinderyLoginProviderProps = {\n  children: React.ReactNode;\n  /**\n   * Loader component, visible while user is authenticating\n   */\n  loader?: React.ReactNode;\n  /**\n   * URL to redirect to after user disconnects\n   */\n  disconnectRedirectUrl?: string;\n};\n\n// Default context properties\nconst defaultContext = {\n  token: null,\n  address: null,\n  user: null,\n  isAuthenticating: true,\n  connect: () => {},\n  disconnect: () => {},\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyLoginContext = createContext<GrinderyLoginContextProps>(\n  defaultContext\n);\n\n/**\n * The component provides context for user authentication.\n *\n * It manages authentication state (token, user, address),\n * provides connect and disconnect functionality,\n * and listens for updates from a hidden iframe.\n *\n * It also exposes the context via the useGrinderyLogin hook.\n */\nexport const GrinderyLoginProvider = ({\n  children,\n  loader,\n  disconnectRedirectUrl,\n}: GrinderyLoginProviderProps) => {\n  // Authentication token object\n  const [token, setToken] = useState<AuthToken | null>(null);\n\n  // User ID\n  const [user, setUser] = useState<string | null>(null);\n\n  // User address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User authentication loading state\n  const [isAuthenticating, setIsAuthenticating] = useState<boolean>(true);\n\n  // Loading state\n  const [loading, setLoading] = React.useState(true);\n\n  // Connect user\n  const connect = async () => {\n    const currentUrl = window.location.href.split('?')[0];\n    window.location.href = `${LOGIN_URL}?redirect_uri=${currentUrl}`;\n  };\n\n  // Disconnect user\n  const disconnect = async () => {\n    // get iframe element\n    const iframe = document.getElementById(\n      'grindery-login-iframe'\n    ) as HTMLIFrameElement;\n\n    // send message to iframe\n    iframe.contentWindow?.postMessage(\n      {\n        method: 'grindery-auth-session-clear',\n      },\n      LOGIN_URL\n    );\n    // clear state\n    setToken(null);\n    setAddress(null);\n    setUser(null);\n\n    // redirect to disconnectRedirectUrl if provided\n    if (disconnectRedirectUrl) {\n      window.location.href = disconnectRedirectUrl;\n    }\n  };\n\n  // Identify user with email in Hubspot and Lucky Orange\n  const identifyUser = useCallback(async () => {\n    if (user && token?.access_token) {\n      try {\n        const rawResponse = await fetch(`${ENGINE_URL}`, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${token.access_token}`,\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            jsonrpc: '2.0',\n            id: new Date(),\n            method: 'or_getUserEmail',\n            params: {},\n          }),\n        });\n        const getUserEmailResponse = await rawResponse.json();\n        if (getUserEmailResponse.result) {\n          identifyUserInHubspot(user, getUserEmailResponse.result);\n          identifyUserInLuckyOrange(user, getUserEmailResponse.result);\n        } else {\n          throw new Error('No user email found');\n        }\n      } catch (error) {\n        console.error('identifyUser error: ', error);\n      }\n    }\n  }, [user, token]);\n\n  // Listen for messages from the login iframe\n  useEffect(() => {\n    // handle message\n    function handleMessage(event: any) {\n      if (event.data?.method === 'grindery-auth-session') {\n        // handle error\n        if (event.data?.error) {\n          console.log('grindery-auth-session error: ', event.data?.error);\n        }\n\n        setToken(event.data?.params?.token || null);\n        setAddress(event.data?.params?.address || null);\n        setUser(event.data?.params?.user || null);\n\n        setIsAuthenticating(false);\n      }\n    }\n\n    // add event listener\n    window.addEventListener('message', handleMessage);\n\n    // remove event listener on unmount\n    return () => window.removeEventListener('message', handleMessage);\n  }, []);\n\n  // Identify user on user change\n  useEffect(() => {\n    identifyUser();\n  }, [identifyUser]);\n\n  useEffect(() => {\n    if (loader) {\n      if (!isAuthenticating) {\n        setTimeout(() => {\n          if (token?.access_token) {\n            setLoading(false);\n          } else {\n            connect();\n          }\n        }, 1000);\n      }\n    }\n  }, [token, isAuthenticating, loader, connect]);\n\n  useEffect(() => {\n    if (loader) {\n      if (!token?.access_token) {\n        setLoading(true);\n      }\n    }\n  }, [token, loader]);\n\n  return (\n    <GrinderyLoginContext.Provider\n      value={{\n        token,\n        user,\n        address,\n        isAuthenticating,\n        connect,\n        disconnect,\n      }}\n    >\n      {/* Hidden iframe to handle login session */}\n      <iframe\n        id=\"grindery-login-iframe\"\n        title=\"Grindery Login Session\"\n        src={`${LOGIN_URL}/session`}\n        style={{ display: 'none' }}\n      />\n      {loading && loader ? loader : children}\n    </GrinderyLoginContext.Provider>\n  );\n};\n\n/** Grindery Login Hook */\nexport const useGrinderyLogin = () => useContext(GrinderyLoginContext);\n\nexport default GrinderyLoginProvider;\n"],"names":["identifyUserInLuckyOrange","userId","email","window","LOQ","push","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","LO","wrap","_context","prev","next","$internal","ready","visitor","identify","stop","_x","apply","arguments","LOGIN_URL","location","hostname","includes","GrinderyLoginContext","createContext","token","address","user","isAuthenticating","connect","disconnect","GrinderyLoginProvider","children","loader","disconnectRedirectUrl","_useState","useState","setToken","_useState2","setUser","_useState3","setAddress","_useState4","setIsAuthenticating","_React$useState","React","loading","setLoading","_ref2","currentUrl","href","split","_ref3","_callee2","_iframe$contentWindow","iframe","_context2","document","getElementById","contentWindow","postMessage","method","identifyUser","useCallback","_callee3","rawResponse","getUserEmailResponse","_context3","access_token","fetch","headers","Authorization","Accept","Content-Type","body","JSON","stringify","jsonrpc","id","Date","params","sent","json","result","_hsq","Error","t0","console","error","useEffect","handleMessage","event","_event$data2","_event$data4","_event$data5","_event$data6","_event$data3","_event$data","data","log","addEventListener","removeEventListener","setTimeout","Provider","value","title","src","style","display","useContext"],"mappings":"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"}